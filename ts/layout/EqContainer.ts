import EqComponent from './EqComponent';
import LayoutState from '../animation/LayoutState';
import Padding from './Padding';
import CanvasController from '../main/CanvasController';
import EqContent from './EqContent';

export default abstract class EqContainer extends EqComponent {

    constructor(padding: Padding) {
        super(padding);
    }

    /**
     * Draws the container on the canvas,
     * only used in the creator.
     * 
     * @param l The layout of this container.
     * @param ctx The graphics context to draw to.
     */
    abstract creatorDraw(l: LayoutState, ctx: CanvasRenderingContext2D): void;

    /**
     * When this container is clicked,
     * add a component to it at some
     * position.
     * 
     * @param clickedLayout The layout state (generated by this container) that was clicked.
     * @param x The x-ordinate clicked.
     * @param y The y-ordinate clicked.
     * @param toAdd The component to add.
     */
    abstract addClick(clickedLayout: LayoutState, x: number, y: number, toAdd: EqComponent);

    /**
     * When one of this container's direct
     * children is clicked, add a component
     * adjacent to the clicked child.
     * 
     * @param clickedLayout The layout state generated by the child.
     * @param x The x-ordinate clicked.
     * @param y The y-ordinate clicked.
     * @param toAdd The component to add.
     */
    abstract addClickOnChild(clickedLayout: LayoutState, x: number, y: number, toAdd: EqComponent);

    /**
     * Returns an object representing
     * the step layout that would generate
     * this container.
     */
    abstract toStepLayout(controller: CanvasController): Object;

    /**
     * Delete a child of this container.
     * 
     * @param toDelete The child to delete.
     */
    abstract delete(toDelete: EqComponent);

    /**
     * Runs a function for every piece of
     * content under this container.
     * 
     * @param forEach The function to run for content.
     */
    abstract forEachUnder(forEach: (content: EqContent<any>) => void);

    /**
     * Returns an array of children of a container
     * as used in the step layout.
     * 
     * @param children The children array.
     * @param controller The canvas controller possessing this container.
     */
    protected static childrenToStepLayout(children: EqComponent[], controller: CanvasController) {
        let toReturn = [];
        children.forEach(comp => {
            if (comp instanceof EqContainer) {
                toReturn.push(comp.toStepLayout(controller));
            } else if (comp instanceof EqContent) {
                toReturn.push(controller.getContentReference(comp));
            } else {
                throw "unrecognized type " + typeof comp;
            }
        });
        return toReturn;
    }
}